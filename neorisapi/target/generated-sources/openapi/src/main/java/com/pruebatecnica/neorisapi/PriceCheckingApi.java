/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pruebatecnica.neorisapi;

import com.pruebatecnica.neorisapi.model.Error;
import com.pruebatecnica.neorisapi.model.PriceResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-12T10:37:34.548952200-05:00[America/Lima]")
@Validated
@Tag(name = "Prices", description = "the Prices API")
public interface PriceCheckingApi {

    default PriceCheckingApiDelegate getDelegate() {
        return new PriceCheckingApiDelegate() {};
    }

    /**
     * GET /price-checking/{applicationDate}/{productId}/{brandId} : applied price list
     *
     * @param applicationDate application date field (required)
     * @param productId product Identifier field (required)
     * @param brandId BRAND Identifier field (required)
     * @return applied price list (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "listPrice",
        summary = "applied price list",
        tags = { "Prices" },
        responses = {
            @ApiResponse(responseCode = "200", description = "applied price list", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriceResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/price-checking/{applicationDate}/{productId}/{brandId}",
        produces = { "application/json" }
    )
    default ResponseEntity<PriceResponse> listPrice(
        @Parameter(name = "applicationDate", description = "application date field", required = true, in = ParameterIn.PATH) @PathVariable("applicationDate") String applicationDate,
        @Parameter(name = "productId", description = "product Identifier field", required = true, in = ParameterIn.PATH) @PathVariable("productId") Integer productId,
        @Parameter(name = "brandId", description = "BRAND Identifier field", required = true, in = ParameterIn.PATH) @PathVariable("brandId") Integer brandId
    ) {
        return getDelegate().listPrice(applicationDate, productId, brandId);
    }

}
